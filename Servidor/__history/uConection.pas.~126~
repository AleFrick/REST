unit uConection;

interface

uses System.SysUtils, System.Classes, Datasnap.DSServer, Datasnap.DSAuth, Data.DB, Data.SqlExpr,
     Data.DbxSqlite, Data.FMTBcd, Datasnap.Provider, Datasnap.DBClient, System.IOUtils, Json;

type
  TTpDataBases = (tpSqlite, tpASA, tpESE, tpDataSnap, tpDB2, tpFirebird, tpIBLite,
                   tpInformix, tpInterbase, tpMSSQL, tpMySQL, tpOdbc, tpOracle);

type
  TConection = class(TComponent)
    private
      function GetTypeDB(TpDb: TTpDataBases): String;
    public
      function NewConection(ConnectionName: String; DriverName: TTpDataBases; WayToDb: String; OUT SqlConn: TSQLConnection): Boolean;
      function NewQuery(NameTable: String; SqlConn: TSQLConnection; OUT SqlQry: TSQLQuery): Boolean;
      function NewDtSetProvider(DtSet: TDataSet; out dtSetProvider: TDataSetProvider): Boolean;
      function NewClientDtSet(ProviderName: TDataSetProvider; DtSet: TDataSet; out CliDtSet: TClientDataSet): Boolean;
      function NewDtSource(DtSet: TDataSet; out DtSource: TDataSource): Boolean;
      function DataToJson(DtSet: TDataSet): TJSONArray;
      function StrToJson(Value: String): TJSONArray;
  end;

implementation
{  ** novos componentes **
  SqlConnection -ok
  SqlQuery   -ok
  DataSetProvider
  ClientDataSet
}
{ TConection }
{ ************** ESQUEMA
    	  sqlcoonection
      	      |
        /-DataSetProvoider
  Qry__/      |
        /-ClientDataSet
Source_/      |
}

// ClientDataSet
function TConection.DataToJson(DtSet: TDataSet): TJSONArray;
var
  jsnObj: TJSONObject;
  i: Integer;
begin
  Result := TJSONArray.Create;

  while not DtSet.Eof do
  begin
    jsnObj := TJSONObject.Create;

    for i := 0 to DtSet.FieldCount - 1 do
      jsnObj.AddPair(TJSONPair.Create(DtSet.Fields[i].FieldName, DtSet.Fields[i].AsString));

    Result.AddElement(jsnObj);
    DtSet.Next;
  end;
end;

function TConection.GetTypeDB(TpDb: TTpDataBases): String;
begin
  case TpDb of
    tpSqlite: Result := 'Sqlite';
    tpASA: Result := 'ASA';
    tpESE: Result := 'ESE';
    tpDataSnap: Result := 'DataSnap';
    tpDB2: Result := 'DB2';
    tpFirebird: Result := 'Firebird';
    tpIBLite: Result := 'IBLite';
    tpInformix: Result := 'Informix';
    tpInterbase: Result := 'Interbase';
    tpMSSQL: Result := 'MSSQL';
    tpMySQL: Result := 'MySQL';
    tpOdbc: Result := 'Odbc';
    tpOracle: Result := 'Oracle';
  end;
end;

function TConection.NewClientDtSet(ProviderName: TDataSetProvider; DtSet: TDataSet;
  out CliDtSet: TClientDataSet): Boolean;
var
  i: Integer;
  Campo: TField;
  a: String;
begin
  try
    CliDtSet.ProviderName := ProviderName.Name;
    for i := 0 to DtSet.FieldCount-1 do
    begin
      CliDtSet.FieldDefs.Add(DtSet.Fields[i].FieldName, ftString , 40,false);
    end;
    CliDtSet.CreateDataSet;
    CliDtSet.Active := True;
    Result := True;
  except
    Result := False;
  end;
end;

// SqlConnection
function TConection.NewConection(ConnectionName: String; DriverName: TTpDataBases;
                            WayToDb: String; OUT SqlConn: TSQLConnection): Boolean;
var
  SqlConn1: TSQLConnection;
begin
  try
    with SqlConn do
    begin
      ConnectionName := ConnectionName;
      DriverName := GetTypeDB(DriverName);
      Params.Add('DriverName='+ GetTypeDB(DriverName));
      Params.Add('DriverUnit=Data.DbxSqlite'); // rever
      Params.Add('DriverPackageLoader=TDBXSqliteDriverLoader,DBXSqliteDriver200.bp'); // rever
      Params.Add('l');
      Params.Add('MetaDataPackageLoader=TDBXSqliteMetaDataCommandFactory,DbxSqlite'); // rever
      Params.Add('Driver200.bpl');
      Params.Add('FailIfMissing=false');
      Params.Add('HostName='+ ConnectionName); //
      Params.Add('Database='+WayToDb); //'Database=D:\Dropbox\TESTES FUNCOES\BD Clientes\Clientes.db'); // veriavel
      LoginPrompt := False;
      Connected := True;
      Name := 'Conn';
      Result := True;
    end;
  except
    result := False;
  end;
end;

// DataSet - Query
function TConection.NewQuery(NameTable: String; SqlConn: TSQLConnection;
          OUT SqlQry: TSQLQuery): Boolean;
var
  SqlQry1: TSQLQuery;
begin
  try
    with SqlQry do
    begin
      Close;
      MaxBlobSize := -1;
      SQL.Clear;
      SQL.Text := 'select * from '+ NameTable;
      SQLConnection := SqlConn;
    end;
    Result := True;
  except
    Result := False;
  end;
end;

function TConection.StrToJson(Value: String): TJSONArray;
var
  StrJson: TJSONObject;
begin
   Result := TJSONArray.Create;
  try
    StrJson.AddPair(TJSONPair.Create(Value,'') );
    Result.AddElement(StrJson);
  except
    StrJson.AddPair(TJSONPair.Create('Nada feito','') );
    Result.AddElement(StrJson);
  end;
end;

// DataSetProvider
function TConection.NewDtSetProvider(DtSet: TDataSet;
  out dtSetProvider: TDataSetProvider): Boolean;
begin
  try
    with dtSetProvider do
    begin
      DataSet := DtSet;
      Constraints := True;
      Name := 'Provoider';
    end;
    Result := True;
  except
    // erro
    Result := False;
  end;
end;

function TConection.NewDtSource(DtSet: TDataSet;
  out DtSource: TDataSource): Boolean;
begin
  try
    DtSource.DataSet := DtSet;
  except
    Result := False;
  end;
end;

end.
