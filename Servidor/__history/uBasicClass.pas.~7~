{
      **************************
      *                        *
      *  Mother class in test  *
      *                        *
      **************************
}
unit uBasicClass;

interface

Uses
     System.SysUtils, System.Classes, Datasnap.DSServer, Datasnap.DSAuth, Data.DB, Data.SqlExpr,
     Data.DbxSqlite, Data.FMTBcd, Datasnap.Provider, Datasnap.DBClient, System.IOUtils, Json;

type
  TBasicClass = class(TComponent)
  private
    // private method
    vSqlConn: TSQLConnection;
    vSqlQry: TSQLQuery;
    vProv: TDataSetProvider;
    vCli: TClientDataSet;
    vDtSource: TDataSource;

    property SqlConn: TSQLConnection read vSqlConn write vSqlConn;
    property SqlQry: TSQLQuery read vSqlQry write vSqlQry;
    property Provider: TDataSetProvider read vProv write vProv;
    property Client: TClientDataSet read vCli write vCli;
    property DtSource: TDataSource read vDtSource write vDtSource;
  protected
    // protected method
  public
    // public method
    // select all
    // insert all
    // update all
    // delete
  { basic compoents
  Conn: TConection;
  SqlConn: TSQLConnection;
  SqlQry: TSQLQuery;
  Provider: TDataSetProvider;
  Cli: TClientDataSet;
  Dtsource: TDataSource;
  }
    constructor Create(SqlConn: TSQLConnection; SqlDataSet: TSQLDataSet;
                     Provoider: TDataSetProvider; Cli: TClientDataSet;
                     DtSource: TDataSource); overload;
  end;

implementation

uses uConection;

{ TBasicClass }

constructor TBasicClass.Create(SqlConn: TSQLConnection; SqlDataSet: TSQLDataSet;
  Provoider: TDataSetProvider; Cli: TClientDataSet; DtSource: TDataSource);
begin
  try
  if not SqlConn = nil then
    if not SqlDataSet = nil then
      if not Provoider = nil then
        if not cli = nil then
          if not DtSource = nil then
          begin

          end;
  except

  end;
end;

end.
